on: push
jobs:
    build:
        runs-on: ubuntu-latest
        steps:
        - uses: actions/checkout@main
        - run: |
              docker login -u chaowenguo -p ${{secrets.DOCKER}}
              docker build -t chaowenguo/postgres .
              docker push chaowenguo/postgres
              curl -d 'grant_type=client_credentials&client_id=${{secrets.CLIENTID}}&client_secret=${{secrets.CLIENTSECRET}}&resource=https%3A%2F%2Fmanagement.azure.com%2F' https://login.microsoftonline.com/${{secrets.TENANTID}}/oauth2/token | python -c "import json,sys;print(json.load(sys.stdin).get('access_token'))"
              if `az group exists -n postgres`
              then
                  az group delete -n postgres -y
              fi
              az group create -n postgres -l westus
              az postgres flexible-server create -n postgrespostgres -g postgres -l westus -u postgres -p pos1gres+ -d default --public-access all --tier Burstable --sku-name Standard_B1ms --storage-size 32 --version 13
              PGPASSWORD=pos1gres+ psql -h postgrespostgres.postgres.database.azure.com -U postgres -d default -f database.sql
              if `az group exists -n mysql`
              then
                  az group delete -n mysql -y
              fi
              az group create -n mysql -l westus
              az mysql flexible-server create -n mysqlmysql -g mysql -l westus -u mysql -p my1sql+my -d default --public-access all --tier Burstable --sku-name Standard_B1ms --storage-size 32 --version 8.0.21
              mysql -h mysqlmysql.mysql.database.azure.com -u mysql -pmy1sql+my -e "SET sql_mode='ANSI_QUOTES'"
              mysql -h mysqlmysql.mysql.database.azure.com -u mysql -pmy1sql+my -D default < database.sql
              if `az group exists -n linux`
              then
                  az group delete -n linux -y
              fi
              az group create -n linux -l westus
              #az vm image list --offer UbuntuServer --all --output table#https://docs.microsoft.com/en-us/azure/virtual-machines/linux/tutorial-manage-vm#understand-vm-images
              #az vm list-sizes --location westus --output table#https://docs.microsoft.com/en-us/azure/virtual-machines/linux/tutorial-manage-vm#find-available-vm-sizes
              az vm create -n linux -g linux --image Canonical:0001-com-ubuntu-server-focal:20_04-lts-gen2:latest --size Standard_B1s --admin-username chaowenguo --generate-ssh-keys --os-disk-size-gb 64
              #https://docs.microsoft.com/en-us/azure/virtual-machines/linux/nsg-quickstart#quickly-open-a-port-for-a-vm
              az vm open-port -g linux -n linux --port 443
              cp ~/.ssh/id_rsa `az vm show -d -g linux -n linux --query publicIps -o tsv`.key
              ip=`ls *.key`
              ssh -o StrictHostKeyChecking=no -i $ip chaowenguo@${ip%.key} 'sudo apt update; sudo apt purge -y snapd; wget https://dl.google.com/linux/direct/google-chrome-stable_current_amd64.deb; sudo apt install -y --no-install-recommends docker.io ./google-chrome-stable_current_amd64.deb libx11-xcb1 x2goserver-xsession; rm google-chrome-stable_current_amd64.deb'
              if `az group exists -n win`
              then
                  az group delete -n win -y
              fi
              az group create -n win -l westus
              az vm create -n win -g win --image MicrosoftWindowsServer:WindowsServer:2019-datacenter-core-with-containers-smalldisk-g2:latest --size Standard_B1s --admin-username chaowenguo --admin-password HL798820y+HL798820y+ --os-disk-size-gb 64
              az vm open-port -g win -n win --port 22
        - uses: actions/upload-artifact@main
          with:
              path: |
                  *.key
